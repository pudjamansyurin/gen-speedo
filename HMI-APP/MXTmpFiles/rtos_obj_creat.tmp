#t/* Create the mutex(es) */
#t/* creation of CanTxMutex */
#tCanTxMutexHandle = osMutexNew(&CanTxMutex_attributes);
#n
#t/* creation of LogMutex */
#tLogMutexHandle = osMutexNew(&LogMutex_attributes);
#n
#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n#t/* Create the queue(s) */
#t/* creation of CanRxQueue */
#tCanRxQueueHandle = osMessageQueueNew (10, sizeof(can_rx_t), &CanRxQueue_attributes);
#n
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
#n#t/* Create the thread(s) */
#t/* creation of ManagerTask */
#tManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
#n
#t/* creation of DisplayTask */
#tDisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
#n
#t/* creation of CanTxTask */
#tCanTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &CanTxTask_attributes);
#n
#t/* creation of CanRxTask */
#tCanRxTaskHandle = osThreadNew(StartCanRxTask, NULL, &CanRxTask_attributes);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
