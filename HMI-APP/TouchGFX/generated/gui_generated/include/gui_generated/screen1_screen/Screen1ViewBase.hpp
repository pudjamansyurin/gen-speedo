/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/imageContainer.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/progress_indicators/ImageProgress.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();

    virtual void scrollWheelUpdateItem(imageContainer& item, int16_t itemIndex)
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box background;
    touchgfx::Container indicator;
    touchgfx::Image batteryLow;
    touchgfx::Image brakeAlert;
    touchgfx::Image temperatureWarning;
    touchgfx::Image errorMessage;
    touchgfx::Image fingerScan;
    touchgfx::Image beamActivated;
    touchgfx::Image keylessKey;
    touchgfx::Image phoneMirroring;
    touchgfx::Image mainGo;
    touchgfx::Image mainReverse;
    touchgfx::ScrollWheel scrollWheel;
    touchgfx::DrawableListItems<imageContainer, 3> scrollWheelListItems;
    touchgfx::Container frame;
    touchgfx::TextArea tripUnit;
    touchgfx::TextArea signalPercent;
    touchgfx::TextArea batteryPercent;
    touchgfx::Image signalIcon;
    touchgfx::Image batteryIcon;
    touchgfx::Image backgroundRight;
    touchgfx::Image backgroundLeft;
    touchgfx::Image tripContainer;
    touchgfx::Image modeContainer;
    touchgfx::Container seinLeftContainer;
    touchgfx::MoveAnimator< touchgfx::Image > seinLeft;
    touchgfx::Container seinRightContainer;
    touchgfx::MoveAnimator< touchgfx::Image > seinRight;
    touchgfx::ImageProgress engineProgress;
    touchgfx::ImageProgress speedProgress;
    touchgfx::TextAreaWithOneWildcard reportValue;
    touchgfx::TextAreaWithOneWildcard reportMode;
    touchgfx::TextAreaWithOneWildcard driveMode;
    touchgfx::TextAreaWithOneWildcard tripValue;
    touchgfx::TextAreaWithOneWildcard tripMode;
    touchgfx::TextAreaWithOneWildcard signalValue;
    touchgfx::TextAreaWithOneWildcard batteryValue;

    /*
     * Wildcard Buffers
     */
    static const uint16_t REPORTVALUE_SIZE = 11;
    touchgfx::Unicode::UnicodeChar reportValueBuffer[REPORTVALUE_SIZE];
    static const uint16_t REPORTMODE_SIZE = 6;
    touchgfx::Unicode::UnicodeChar reportModeBuffer[REPORTMODE_SIZE];
    static const uint16_t DRIVEMODE_SIZE = 12;
    touchgfx::Unicode::UnicodeChar driveModeBuffer[DRIVEMODE_SIZE];
    static const uint16_t TRIPVALUE_SIZE = 7;
    touchgfx::Unicode::UnicodeChar tripValueBuffer[TRIPVALUE_SIZE];
    static const uint16_t TRIPMODE_SIZE = 7;
    touchgfx::Unicode::UnicodeChar tripModeBuffer[TRIPMODE_SIZE];
    static const uint16_t SIGNALVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar signalValueBuffer[SIGNALVALUE_SIZE];
    static const uint16_t BATTERYVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar batteryValueBuffer[BATTERYVALUE_SIZE];

private:
    touchgfx::Callback<Screen1ViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // SCREEN1VIEWBASE_HPP
