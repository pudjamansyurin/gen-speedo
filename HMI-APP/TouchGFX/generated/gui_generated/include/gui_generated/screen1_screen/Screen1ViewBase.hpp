/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Container frame;
    touchgfx::Box background;
    touchgfx::TextArea tripUnit;
    touchgfx::TextArea signalPercent;
    touchgfx::TextArea batteryPercent;
    touchgfx::Image signalIcon;
    touchgfx::Image batteryIcon;
    touchgfx::Image backgroundRight;
    touchgfx::Image backgroundLeft;
    touchgfx::Image tripContainer;
    touchgfx::Image modeContainer;
    touchgfx::Container indicator;
    touchgfx::Image batteryLow;
    touchgfx::Image brakeAlert;
    touchgfx::Image temperatureWarning;
    touchgfx::Image errorMessage;
    touchgfx::Image fingerScan;
    touchgfx::Image beamActivated;
    touchgfx::Image keylessKey;
    touchgfx::Image phoneMirroring;
    touchgfx::Image mainGo;
    touchgfx::Image mainReverse;
    touchgfx::Circle circleLeft;
    touchgfx::PainterRGB565 circleLeftPainter;
    touchgfx::Circle circleRight;
    touchgfx::PainterRGB565 circleRightPainter;
    touchgfx::TextAreaWithOneWildcard reportValue;
    touchgfx::TextAreaWithOneWildcard reportMode;
    touchgfx::TextAreaWithOneWildcard driveMode;
    touchgfx::TextAreaWithOneWildcard tripValue;
    touchgfx::TextAreaWithOneWildcard tripMode;
    touchgfx::TextAreaWithOneWildcard signalValue;
    touchgfx::TextAreaWithOneWildcard batteryValue;
    touchgfx::Image speedLevel;
    touchgfx::Image engineRotation;
    touchgfx::Image seinLeft;
    touchgfx::Image seinRight;

    /*
     * Wildcard Buffers
     */
    static const uint16_t REPORTVALUE_SIZE = 11;
    touchgfx::Unicode::UnicodeChar reportValueBuffer[REPORTVALUE_SIZE];
    static const uint16_t REPORTMODE_SIZE = 6;
    touchgfx::Unicode::UnicodeChar reportModeBuffer[REPORTMODE_SIZE];
    static const uint16_t DRIVEMODE_SIZE = 12;
    touchgfx::Unicode::UnicodeChar driveModeBuffer[DRIVEMODE_SIZE];
    static const uint16_t TRIPVALUE_SIZE = 7;
    touchgfx::Unicode::UnicodeChar tripValueBuffer[TRIPVALUE_SIZE];
    static const uint16_t TRIPMODE_SIZE = 7;
    touchgfx::Unicode::UnicodeChar tripModeBuffer[TRIPMODE_SIZE];
    static const uint16_t SIGNALVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar signalValueBuffer[SIGNALVALUE_SIZE];
    static const uint16_t BATTERYVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar batteryValueBuffer[BATTERYVALUE_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // SCREEN1VIEWBASE_HPP
