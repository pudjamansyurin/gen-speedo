/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/dashboardscreen_screen/dashboardScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

dashboardScreenViewBase::dashboardScreenViewBase() :
    updateItemCallback(this, &dashboardScreenViewBase::updateItemCallbackHandler)
{

    background.setPosition(-1, -1, 800, 480);
    background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    indicatorContainer.setPosition(274, 114, 250, 250);
    indicatorContainer.setVisible(false);

    batteryLow.setXY(24, 67);
    batteryLow.setBitmap(touchgfx::Bitmap(BITMAP_BATTERYDRAINOUT_ID));
    indicatorContainer.add(batteryLow);

    brakeAlert.setXY(28, 48);
    brakeAlert.setBitmap(touchgfx::Bitmap(BITMAP_BRAKESYSTEMALERT_ID));
    indicatorContainer.add(brakeAlert);

    temperatureWarning.setXY(52, 71);
    temperatureWarning.setBitmap(touchgfx::Bitmap(BITMAP_COOLANTTEMPERATUREWARNING_ID));
    indicatorContainer.add(temperatureWarning);

    errorMessage.setXY(52, 63);
    errorMessage.setBitmap(touchgfx::Bitmap(BITMAP_ELECTRONICERRORMESSAGE_ID));
    indicatorContainer.add(errorMessage);

    fingerScan.setXY(55, 50);
    fingerScan.setBitmap(touchgfx::Bitmap(BITMAP_FINGERSCANLOGINSTATUS_ID));
    indicatorContainer.add(fingerScan);

    beamActivated.setXY(33, 64);
    beamActivated.setBitmap(touchgfx::Bitmap(BITMAP_HIGHBEAMACTIVATED_ID));
    indicatorContainer.add(beamActivated);

    keylessKey.setXY(34, 55);
    keylessKey.setBitmap(touchgfx::Bitmap(BITMAP_KEYLESSIGNITIONKEYDETECTION_ID));
    indicatorContainer.add(keylessKey);

    phoneMirroring.setXY(33, 63);
    phoneMirroring.setBitmap(touchgfx::Bitmap(BITMAP_SMARTPHONEMIRRORINGSTATUS_ID));
    indicatorContainer.add(phoneMirroring);

    mainGo.setXY(21, 86);
    mainGo.setBitmap(touchgfx::Bitmap(BITMAP_MAINGO_ID));
    indicatorContainer.add(mainGo);

    mainReverse.setXY(76, 86);
    mainReverse.setBitmap(touchgfx::Bitmap(BITMAP_MAINREVERSE_ID));
    indicatorContainer.add(mainReverse);

    indicatorWheel.setPosition(146, 132, 508, 230);
    indicatorWheel.setHorizontal(true);
    indicatorWheel.setCircular(true);
    indicatorWheel.setEasingEquation(touchgfx::EasingEquations::expoEaseIn);
    indicatorWheel.setSwipeAcceleration(10);
    indicatorWheel.setDragAcceleration(10);
    indicatorWheel.setNumberOfItems(10);
    indicatorWheel.setSelectedItemOffset(0);
    indicatorWheel.setDrawableSize(230, 139);
    indicatorWheel.setDrawables(indicatorWheelListItems, updateItemCallback);
    indicatorWheel.animateToItem(1, 0);

    frameContainer.setPosition(0, 0, 800, 480);

    tripUnit.setXY(292, 114);
    tripUnit.setColor(touchgfx::Color::getColorFrom24BitRGB(128, 128, 128));
    tripUnit.setLinespacing(0);
    tripUnit.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
    frameContainer.add(tripUnit);

    signalPercent.setXY(485, 61);
    signalPercent.setColor(touchgfx::Color::getColorFrom24BitRGB(179, 179, 179));
    signalPercent.setLinespacing(0);
    signalPercent.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
    frameContainer.add(signalPercent);

    batteryPercent.setXY(377, 61);
    batteryPercent.setColor(touchgfx::Color::getColorFrom24BitRGB(179, 179, 179));
    batteryPercent.setLinespacing(0);
    batteryPercent.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
    frameContainer.add(batteryPercent);

    signalIcon.setXY(412, 62);
    signalIcon.setBitmap(touchgfx::Bitmap(BITMAP_SIGNALICON_ID));
    frameContainer.add(signalIcon);

    batteryIcon.setXY(302, 63);
    batteryIcon.setBitmap(touchgfx::Bitmap(BITMAP_BATTERYICON_ID));
    frameContainer.add(batteryIcon);

    backgroundRight.setXY(556, 57);
    backgroundRight.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUNDRIGHT_ID));
    frameContainer.add(backgroundRight);

    backgroundLeft.setXY(0, 57);
    backgroundLeft.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUNDLEFT_ID));
    frameContainer.add(backgroundLeft);

    tripBox.setXY(364, 98);
    tripBox.setBitmap(touchgfx::Bitmap(BITMAP_TRIPCONTAINER_ID));
    frameContainer.add(tripBox);

    driveBox.setXY(277, 364);
    driveBox.setBitmap(touchgfx::Bitmap(BITMAP_MODECONTAINER_ID));
    frameContainer.add(driveBox);

    seinLeftContainer.setPosition(152, 67, 80, 355);

    seinLeft.setXY(80, 0);
    seinLeft.setBitmap(touchgfx::Bitmap(BITMAP_SEINLEFT_ID));
    seinLeftContainer.add(seinLeft);

    seinRightContainer.setPosition(567, 67, 80, 355);

    seinRight.setXY(-80, 0);
    seinRight.setBitmap(touchgfx::Bitmap(BITMAP_SEINRIGHTFLIPPED_ID));
    seinRightContainer.add(seinRight);

    engineProgress.setXY(558, 57);
    engineProgress.setProgressIndicatorPosition(0, 0, 137, 366);
    engineProgress.setRange(0, 100);
    engineProgress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    engineProgress.setBitmap(BITMAP_ENGINEROTATIONFLIPPED_ID);
    engineProgress.setValue(100);
    engineProgress.setAnchorAtZero(true);

    speedProgress.setXY(105, 57);
    speedProgress.setProgressIndicatorPosition(0, 0, 137, 366);
    speedProgress.setRange(0, 100);
    speedProgress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    speedProgress.setBitmap(BITMAP_SPEEDLEVEL_ID);
    speedProgress.setValue(100);
    speedProgress.setAnchorAtZero(true);

    reportValue.setPosition(361, 406, 151, 18);
    reportValue.setColor(touchgfx::Color::getColorFrom24BitRGB(179, 179, 179));
    reportValue.setLinespacing(0);
    Unicode::snprintf(reportValueBuffer, REPORTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID17).getText());
    reportValue.setWildcard(reportValueBuffer);
    reportValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));

    reportMode.setXY(285, 406);
    reportMode.setColor(touchgfx::Color::getColorFrom24BitRGB(179, 179, 179));
    reportMode.setLinespacing(0);
    Unicode::snprintf(reportModeBuffer, REPORTMODE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID16).getText());
    reportMode.setWildcard(reportModeBuffer);
    reportMode.resizeToCurrentText();
    reportMode.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));

    driveWheel.setPosition(288, 369, 222, 19);
    driveWheel.setHorizontal(false);
    driveWheel.setCircular(true);
    driveWheel.setEasingEquation(touchgfx::EasingEquations::expoEaseIn);
    driveWheel.setSwipeAcceleration(10);
    driveWheel.setDragAcceleration(10);
    driveWheel.setNumberOfItems(4);
    driveWheel.setSelectedItemOffset(0);
    driveWheel.setDrawableSize(19, 0);
    driveWheel.setDrawables(driveWheelListItems, updateItemCallback);
    driveWheel.animateToItem(1, 0);

    tripValue.setPosition(374, 102, 119, 20);
    tripValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    tripValue.setLinespacing(0);
    Unicode::snprintf(tripValueBuffer, TRIPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
    tripValue.setWildcard(tripValueBuffer);
    tripValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));

    tripMode.setPosition(269, 93, 79, 20);
    tripMode.setColor(touchgfx::Color::getColorFrom24BitRGB(128, 128, 128));
    tripMode.setLinespacing(0);
    Unicode::snprintf(tripModeBuffer, TRIPMODE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
    tripMode.setWildcard(tripModeBuffer);
    tripMode.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));

    signalValue.setPosition(443, 61, 39, 20);
    signalValue.setColor(touchgfx::Color::getColorFrom24BitRGB(179, 179, 179));
    signalValue.setLinespacing(0);
    Unicode::snprintf(signalValueBuffer, SIGNALVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
    signalValue.setWildcard(signalValueBuffer);
    signalValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));

    batteryValue.setPosition(335, 61, 39, 20);
    batteryValue.setColor(touchgfx::Color::getColorFrom24BitRGB(179, 179, 179));
    batteryValue.setLinespacing(0);
    Unicode::snprintf(batteryValueBuffer, BATTERYVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID12).getText());
    batteryValue.setWildcard(batteryValueBuffer);
    batteryValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));

    add(background);
    add(indicatorContainer);
    add(indicatorWheel);
    add(frameContainer);
    add(seinLeftContainer);
    add(seinRightContainer);
    add(engineProgress);
    add(speedProgress);
    add(reportValue);
    add(reportMode);
    add(driveWheel);
    add(tripValue);
    add(tripMode);
    add(signalValue);
    add(batteryValue);
}

void dashboardScreenViewBase::setupScreen()
{
    indicatorWheel.initialize();
    for (int i = 0; i < indicatorWheelListItems.getNumberOfDrawables(); i++)
    {
        indicatorWheelListItems[i].initialize();
    }
    driveWheel.initialize();
    for (int i = 0; i < driveWheelListItems.getNumberOfDrawables(); i++)
    {
        driveWheelListItems[i].initialize();
    }
}

void dashboardScreenViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &indicatorWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        indicatorWheelContainer* cc = (indicatorWheelContainer*)d;
        indicatorWheelUpdateItem(*cc, itemIndex);
    }
    if (items == &driveWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        driveWheelContainer* cc = (driveWheelContainer*)d;
        driveWheelUpdateItem(*cc, itemIndex);
    }
}
