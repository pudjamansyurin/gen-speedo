/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
    interaction1EndedCallback(this, &Screen1ViewBase::interaction1EndedCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    background.setBitmap(touchgfx::Bitmap(BITMAP_HMI_LEFT_ID));
    background.setPosition(0, 0, 320, 240);
    background.setOffset(0, 0);

    seinLeft.setXY(275, 83);
    seinLeft.setBitmap(touchgfx::Bitmap(BITMAP_HMI_LEFT_SEIN_ID));

    keylessKey.setXY(228, 133);
    keylessKey.setBitmap(touchgfx::Bitmap(BITMAP_HMI_LEFT_KEYLESS_ID));

    mirrorPhone.setXY(261, 129);
    mirrorPhone.setBitmap(touchgfx::Bitmap(BITMAP_HMI_LEFT_MIRROR_ID));

    fingerScan.setXY(293, 127);
    fingerScan.setBitmap(touchgfx::Bitmap(BITMAP_HMI_LEFT_FINGER_ID));

    tripLabel.setXY(127, 89);
    tripLabel.setBitmap(touchgfx::Bitmap(BITMAP_HMI_LEFT_TRIP_B_ID));

    tripValue.setPosition(159, 83, 64, 25);
    tripValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    tripValue.setLinespacing(0);
    Unicode::snprintf(tripValueBuffer, TRIPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
    tripValue.setWildcard(tripValueBuffer);
    tripValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));

    odomValue.setPosition(159, 107, 64, 25);
    odomValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    odomValue.setLinespacing(0);
    Unicode::snprintf(odomValueBuffer, ODOMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3).getText());
    odomValue.setWildcard(odomValueBuffer);
    odomValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));

    speedoMeter.setXY(81, 65);
    speedoMeter.setBitmap(touchgfx::Bitmap(BITMAP_CLOCK_STANDARD_SECOND_HAND_ID));
    speedoMeter.setWidth(200);
    speedoMeter.setHeight(200);
    speedoMeter.setBitmapPosition(96.500f, 33.500f);
    speedoMeter.setScale(1.400f);
    speedoMeter.setCameraDistance(1000.000f);
    speedoMeter.setOrigo(100.000f, 100.000f, 1000.000f);
    speedoMeter.setCamera(100.000f, 100.000f);
    speedoMeter.updateAngles(0.000f, 0.000f, -1.570f);
    speedoMeter.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);

    overlay.setPosition(24, 23, 296, 193);
    overlay.setOrigin(0.000f, 0.000f);
    overlay.setScale(1.000f, 1.000f);
    overlay.setAngle(0.000f);
    overlayPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    overlay.setPainter(overlayPainter);
    const touchgfx::AbstractShape::ShapePoint<float> overlayPoints[12] = { { 294.000f, 40.000f }, { 230.000f, 40.000f }, { 205.000f, 13.800f }, { 122.300f, 14.000f }, { 97.700f, 21.400f }, { 60.000f, 45.000f }, { 35.000f, 90.000f }, { 12.000f, 160.000f }, { 33.000f, 180.000f }, { 195.000f, 180.000f }, { 223.000f, 137.000f }, { 294.000f, 137.000f } };
    overlay.setShape(overlayPoints);

    add(background);
    add(seinLeft);
    add(keylessKey);
    add(mirrorPhone);
    add(fingerScan);
    add(tripLabel);
    add(tripValue);
    add(odomValue);
    add(speedoMeter);
    add(overlay);
}

void Screen1ViewBase::setupScreen()
{

}

//Called when the screen is done with transition/load
void Screen1ViewBase::afterTransition()
{
    //Interaction1
    //When screen is entered fade overlay
    //Fade overlay to alpha:0 with LinearOut easing in 1000 ms (60 Ticks)
    overlay.clearFadeAnimationEndedAction();
    overlay.startFadeAnimation(0, 60, touchgfx::EasingEquations::linearEaseOut);
    overlay.setFadeAnimationEndedAction(interaction1EndedCallback);

    //Interaction2
    //When screen is entered call setAnimationState on Screen1
    //Call setAnimationState
    setAnimationState(true);
}

void Screen1ViewBase::setAnimationState(bool value)
{

}

void Screen1ViewBase::interaction1EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Shape>& comp)
{

}
